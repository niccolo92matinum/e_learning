{
  "version": 3,
  "sources": ["../../react-autobind/lib/autoBind.js", "../../react-autobind/index.js"],
  "sourcesContent": ["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports['default'] = autoBind;\nvar wontBind = ['constructor', 'render', 'componentWillMount', 'componentDidMount', 'componentWillReceiveProps', 'shouldComponentUpdate', 'componentWillUpdate', 'componentDidUpdate', 'componentWillUnmount'];\n\nvar toBind = [];\n\nfunction autoBind(context) {\n  if (context === undefined) {\n    console.error('Autobind error: No context provided.');\n    return;\n  }\n\n  var objPrototype = Object.getPrototypeOf(context);\n\n  if (arguments.length > 1) {\n    // If a list of methods to bind is provided, use it.\n    toBind = Array.prototype.slice.call(arguments, 1);\n  } else {\n    // If no list of methods to bind is provided, bind all available methods in class.\n    toBind = Object.getOwnPropertyNames(objPrototype);\n  }\n\n  toBind.forEach(function (method) {\n    var descriptor = Object.getOwnPropertyDescriptor(objPrototype, method);\n\n    if (descriptor === undefined) {\n      console.warn('Autobind: \"' + method + '\" method not found in class.');\n      return;\n    }\n\n    // Return if it's special case function or if not a function at all\n    if (wontBind.indexOf(method) !== -1 || typeof descriptor.value !== 'function') {\n      return;\n    }\n\n    Object.defineProperty(objPrototype, method, boundMethod(objPrototype, method, descriptor));\n  });\n}\n\n/**\n* From autobind-decorator (https://github.com/andreypopp/autobind-decorator/tree/master)\n* Return a descriptor removing the value and returning a getter\n* The getter will return a .bind version of the function\n* and memoize the result against a symbol on the instance\n*/\nfunction boundMethod(objPrototype, method, descriptor) {\n  var fn = descriptor.value;\n\n  return {\n    configurable: true,\n    get: function get() {\n      if (this === objPrototype || this.hasOwnProperty(method)) {\n        return fn;\n      }\n\n      var boundFn = fn.bind(this);\n      Object.defineProperty(this, method, {\n        value: boundFn,\n        configurable: true,\n        writable: true\n      });\n      return boundFn;\n    }\n  };\n}\nmodule.exports = exports['default'];\n", "module.exports = require('./lib/autoBind');\n"],
  "mappings": ";;;;;AAAA;AAAA;AAAA;AAEA,WAAO,eAAe,SAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,YAAQ,SAAS,IAAI;AACrB,QAAI,WAAW,CAAC,eAAe,UAAU,sBAAsB,qBAAqB,6BAA6B,yBAAyB,uBAAuB,sBAAsB,sBAAsB;AAE7M,QAAI,SAAS,CAAC;AAEd,aAAS,SAAS,SAAS;AACzB,UAAI,YAAY,QAAW;AACzB,gBAAQ,MAAM,sCAAsC;AACpD;AAAA,MACF;AAEA,UAAI,eAAe,OAAO,eAAe,OAAO;AAEhD,UAAI,UAAU,SAAS,GAAG;AAExB,iBAAS,MAAM,UAAU,MAAM,KAAK,WAAW,CAAC;AAAA,MAClD,OAAO;AAEL,iBAAS,OAAO,oBAAoB,YAAY;AAAA,MAClD;AAEA,aAAO,QAAQ,SAAU,QAAQ;AAC/B,YAAI,aAAa,OAAO,yBAAyB,cAAc,MAAM;AAErE,YAAI,eAAe,QAAW;AAC5B,kBAAQ,KAAK,gBAAgB,SAAS,8BAA8B;AACpE;AAAA,QACF;AAGA,YAAI,SAAS,QAAQ,MAAM,MAAM,MAAM,OAAO,WAAW,UAAU,YAAY;AAC7E;AAAA,QACF;AAEA,eAAO,eAAe,cAAc,QAAQ,YAAY,cAAc,QAAQ,UAAU,CAAC;AAAA,MAC3F,CAAC;AAAA,IACH;AAQA,aAAS,YAAY,cAAc,QAAQ,YAAY;AACrD,UAAI,KAAK,WAAW;AAEpB,aAAO;AAAA,QACL,cAAc;AAAA,QACd,KAAK,SAAS,MAAM;AAClB,cAAI,SAAS,gBAAgB,KAAK,eAAe,MAAM,GAAG;AACxD,mBAAO;AAAA,UACT;AAEA,cAAI,UAAU,GAAG,KAAK,IAAI;AAC1B,iBAAO,eAAe,MAAM,QAAQ;AAAA,YAClC,OAAO;AAAA,YACP,cAAc;AAAA,YACd,UAAU;AAAA,UACZ,CAAC;AACD,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AACA,WAAO,UAAU,QAAQ,SAAS;AAAA;AAAA;;;ACrElC;AAAA;AAAA,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
